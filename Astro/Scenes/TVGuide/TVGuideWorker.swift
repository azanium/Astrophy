//
//  TVGuideWorker.swift
//  Astro
//
//  Created by Suhendra Ahmad on 9/20/17.
//  Copyright (c) 2017 Ainasoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class TVGuideWorker
{
    func fetchChannels(onCompletionHandler: ((ApiResponse.ChannelsResponse)->Void)?)
    {
        NetworkManager.shared.get(url: ApiConstants.channelList,
                                  params: nil,
                                  headers: nil) { (response) in
                                    
                                    switch response {
                                    case .Success(let result):
                                        var channels = [Channel]()
                                        channels = DataTransformer.transformJsonToChannels(result)
                                        onCompletionHandler?(.success(channels: channels))
                                        
                                    case .Error( _, let message):
                                        onCompletionHandler?(.error(message: message))
                                    }
        }
    }
    
    func fetchChannelMetas(ids: String, onCompletionHandler: ((ApiResponse.ChannelMetaResponse)->Void)?)
    {
        let url = "\(ApiConstants.channelMetas)?channelId=\(ids)"
        NetworkManager.shared.get(url: url,
                                  params: nil,
                                  headers: nil) { (response) in
                                    
                                    switch response {
                                    case .Success(let result):
                                        var channels = [ChannelMeta]()
                                        channels = DataTransformer.transformJsonToChannelMeta(result)
                                        onCompletionHandler?(.success(channels: channels))
                                        
                                    case .Error( _, let message):
                                        onCompletionHandler?(.error(message: message))
                                    }
        }
    }
    
    func fetchEvents(ids: String, startDate: String, endDate: String, onCompletionHandler: ((ApiResponse.ChannelEventsResponse)->Void)?) {
        let url = "\(ApiConstants.channelEvents)?channelId=\(ids)&periodStart=\(startDate)&periodEnd=\(endDate)"
        NetworkManager.shared.get(url: url,
                                  params: nil,
                                  headers: nil) { (response) in
                                    
                                    switch response {
                                    case .Success(let result):
                                        var events = [ChannelEvent]()
                                        events = DataTransformer.transformJsonToChannelEvent(result)
                                        onCompletionHandler?(.success(events: events))
                                        
                                    case .Error( _, let message):
                                        onCompletionHandler?(.error(message: message))
                                    }
        }
    }
    
}
