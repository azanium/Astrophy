//
//  MainInteractor.swift
//  Astro
//
//  Created by Suhendra Ahmad on 9/19/17.
//  Copyright (c) 2017 Ainasoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RealmSwift

protocol MainBusinessLogic
{
    func fetchFavorites(request: Main.Favorite.Request)
    func sortChannelNumbers(ascending: Bool)
    func sortChannelNames(ascending: Bool)
    func removeFavoriteChannel(request: Main.Favorite.Request)
}

protocol MainDataStore
{
    var channelMetas: [ChannelMeta] { get set }
}

class MainInteractor: MainBusinessLogic, MainDataStore
{
    var presenter: MainPresentationLogic?
    var worker: MainWorker? = MainWorker()
    var channelMetas = [ChannelMeta]()
    
    // MARK: Do something
    
    func fetchFavorites(request: Main.Favorite.Request) {
        var favorites: Results<ChannelMeta>!
        do {
            let realm = try Realm()
            favorites = realm.objects(ChannelMeta.self)
        }
        catch let error as NSError {
            fatalError(error.localizedDescription)
        }
        
        channelMetas = [ChannelMeta]()
        
        for fav in favorites {
            channelMetas += [fav]
        }
        
        let resp = Main.Favorite.Response(metas: channelMetas)
        self.presenter?.presentFavorites(response: resp)
    }
    
    func sortChannelNumbers(ascending: Bool) {
        channelMetas.sort { ascending ? $0.0.channelStubNumber < $0.1.channelStubNumber : $0.0.channelStubNumber > $0.1.channelStubNumber }
        let response = Main.Favorite.Response(metas: channelMetas)
        self.presenter?.presentFavorites(response: response)
    }
    
    func sortChannelNames(ascending: Bool) {
        channelMetas.sort { ascending ? $0.0.channelTitle < $0.1.channelTitle : $0.0.channelTitle > $0.1.channelTitle }
        let response = Main.Favorite.Response(metas: channelMetas)
        self.presenter?.presentFavorites(response: response)
    }
    
    func removeFavoriteChannel(request: Main.Favorite.Request) {
        DispatchQueue.main.async {
            do {
                let realm = try! Realm()
                
                if let obj = realm.object(ofType: ChannelMeta.self, forPrimaryKey: request.meta.channelId) {
                    try realm.write {
                        realm.delete(obj)
                    }
                }
            }
            catch let error as NSError {
                fatalError(error.localizedDescription)
            }
            
            self.fetchFavorites(request: request)
        }
    }
}
